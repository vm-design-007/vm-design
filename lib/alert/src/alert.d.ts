import type { VmType, VmIcon, HandleMouse } from '../..';
import type { BasicType } from '../../_utils';
import type { DefineComponent, PropType, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    readonly type: BasicType<PropType<VmType>, VmType | null>;
    readonly fontSize: BasicType<PropType<string | number>, string | number | null>;
    readonly titleSize: BasicType<PropType<string | number>, string | number | null>;
    readonly bold: BasicType<BooleanConstructor, boolean>;
    readonly center: BasicType<BooleanConstructor, boolean>;
    readonly close: BasicType<BooleanConstructor, boolean>;
    readonly simple: BasicType<BooleanConstructor, boolean>;
    readonly title: BasicType<PropType<string>, string | null>;
    readonly round: BasicType<BooleanConstructor, boolean>;
    readonly background: BasicType<PropType<string>, string | null>;
    readonly color: BasicType<PropType<string>, string | null>;
    readonly titleColor: BasicType<PropType<string>, string | null>;
    readonly fixed: BasicType<BooleanConstructor, boolean>;
    readonly closeIcon: BasicType<PropType<VmIcon>, null>;
    readonly beforeIcon: BasicType<PropType<VmIcon>, null>;
    readonly alertList: BasicType<PropType<string[]>, string[] | null>;
    readonly duration: BasicType<NumberConstructor, number | null>;
    readonly onClose: BasicType<PropType<HandleMouse>, null>;
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    readonly type: BasicType<PropType<VmType>, VmType | null>;
    readonly fontSize: BasicType<PropType<string | number>, string | number | null>;
    readonly titleSize: BasicType<PropType<string | number>, string | number | null>;
    readonly bold: BasicType<BooleanConstructor, boolean>;
    readonly center: BasicType<BooleanConstructor, boolean>;
    readonly close: BasicType<BooleanConstructor, boolean>;
    readonly simple: BasicType<BooleanConstructor, boolean>;
    readonly title: BasicType<PropType<string>, string | null>;
    readonly round: BasicType<BooleanConstructor, boolean>;
    readonly background: BasicType<PropType<string>, string | null>;
    readonly color: BasicType<PropType<string>, string | null>;
    readonly titleColor: BasicType<PropType<string>, string | null>;
    readonly fixed: BasicType<BooleanConstructor, boolean>;
    readonly closeIcon: BasicType<PropType<VmIcon>, null>;
    readonly beforeIcon: BasicType<PropType<VmIcon>, null>;
    readonly alertList: BasicType<PropType<string[]>, string[] | null>;
    readonly duration: BasicType<NumberConstructor, number | null>;
    readonly onClose: BasicType<PropType<HandleMouse>, null>;
}>>, {
    readonly type: VmType;
    readonly fontSize: string | number;
    readonly titleSize: string | number;
    readonly bold: boolean;
    readonly center: boolean;
    readonly close: boolean;
    readonly simple: boolean;
    readonly title: string;
    readonly round: boolean;
    readonly background: string;
    readonly color: string;
    readonly titleColor: string;
    readonly fixed: boolean;
    readonly closeIcon: VmIcon;
    readonly beforeIcon: VmIcon;
    readonly alertList: string[];
    readonly duration: number;
    readonly onClose: HandleMouse;
}>;
export default _sfc_main;
